generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mix {
  id          String @id @default(cuid())
  title       String @db.VarChar(255)
  description String
  audioUrl    String

  userId    String
  tags      Tag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([userId])
  @@map("mix")
}

model LiveShow {
  id          String @id @default(cuid())
  title       String @db.VarChar(255)
  description String
  tags        Tag[]

  startDate DateTime @default(now())
  userId    String

  status LiveShowStatus @default(SETUP)

  @@index([userId])
  @@map("live_show")
}

model Tag {
  id         String    @id @default(cuid())
  title      String    @db.VarChar(25)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  Mix        Mix?      @relation(fields: [mixId], references: [id])
  mixId      String?
  LiveShow   LiveShow? @relation(fields: [liveShowId], references: [id])
  liveShowId String?

  @@unique([title])
  @@map("tag")
}

enum LiveShowStatus {
  SETUP
  AWAITING
  STREAMING
  FINISHED
}

//next auth
// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String    @id @default(cuid())
  username      String?
  password      String?
  name          String?
  bio           String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  headerImage   String?
  urls          String[]
  streamKey     String?   @unique
  accounts      Account[]
  sessions      Session[]

  @@index([streamKey])
  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}
